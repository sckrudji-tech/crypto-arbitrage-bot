# arbitrage.py
import asyncio
import csv
import logging
import os 
import time 
from datetime import datetime, UTC
from collections import defaultdict
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationHandlerStop
from telegram.error import RetryAfter, BadRequest

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config import * 
import ccxt.pro as ccxt 
from ccxt.base.errors import InvalidNonce

# *** –Ü–ú–ü–û–†–¢ –í–°–Ü–• –°–¢–†–ê–¢–ï–ì–Ü–ô ***
from strategies.cross_exchange import check_cross_exchange_arbitrage
from strategies.triangular import check_triangular_arbitrage 
from strategies.spot_futures_arbitrage import check_spot_futures_arbitrage
from strategies.paper_trader import PaperTrader

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
bot_running = False
arbitrage_history = {} 
price_cache = {} 
bot = Bot(token=TELEGRAM_TOKEN)
message_tracker = {}
paper_trader = None  # ‚Üê –ó–ú–Ü–ù–ï–ù–û: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∞

# –ù–æ–≤—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Ä–µ–π—Ç-–ª—ñ–º—ñ—Ç—É —Ç–∞ debounce
telegram_message_queue = None
telegram_last_message_time = 0
last_message_update = defaultdict(float)
MIN_UPDATE_INTERVAL = 30
TELEGRAM_MIN_INTERVAL = 2
MAX_ACTIVE_MESSAGES = 8

# --- –£–¢–ò–õ–Ü–¢–ù–Ü –§–£–ù–ö–¶–Ü–á ---

async def _send_telegram_message_actual(message, details=None, message_id=None):
    keyboard = [[InlineKeyboardButton("–î–µ—Ç–∞–ª—ñ", callback_data='details')]] if details else []
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        if bot.token is None: 
            logging.error("Telegram TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return None
            
        if message_id:
            await bot.edit_message_text(
                chat_id=CHAT_ID,
                message_id=message_id,
                text=message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {message_id}: {message[:100]}...")
            return message_id
        else:
            sent_message = await bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            logging.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message[:100]}...")
            return sent_message.message_id
    except RetryAfter as e:
        logging.warning(f"Telegram —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å: —á–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.retry_after)
        return await _send_telegram_message_actual(message, details, message_id)
    except BadRequest as e:
        if "message is not modified" in str(e).lower():
            logging.debug("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
            return message_id
        logging.error(f"BadRequest Telegram: {e} (–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message[:100]}...)")
        return None
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram: {e} (–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message[:100]}...)")
        return None

async def send_telegram_message(message, details=None, message_id=None):
    if telegram_message_queue is not None:
        await telegram_message_queue.put({
            'message': message,
            'details': details,
            'message_id': message_id
        })
    else:
        return await _send_telegram_message_actual(message, details, message_id)

async def telegram_message_worker():
    global telegram_last_message_time
    while bot_running:
        try:
            message_data = await telegram_message_queue.get()
            current_time = time.time()
            wait_time = TELEGRAM_MIN_INTERVAL - (current_time - telegram_last_message_time)
            if wait_time > 0:
                await asyncio.sleep(wait_time)
            await _send_telegram_message_actual(**message_data)
            telegram_last_message_time = time.time()
            telegram_message_queue.task_done()
        except asyncio.CancelledError:
            break
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ telegram_message_worker: {e}")

def save_to_csv(arbitrage_data):
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–∞—Ç–∞–ª–æ–≥ —ñ—Å–Ω—É—î
    os.makedirs(os.path.dirname(OUTPUT_CSV), exist_ok=True)
    
    fieldnames = ['timestamp', 'type', 'symbol', 'buy_exchange', 'sell_exchange', 'buy_price', 'sell_price', 'profit', 'volume', 'path', 'details', 'earnings']
    file_exists = os.path.exists(OUTPUT_CSV)
    try:
        with open(OUTPUT_CSV, 'a', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            if not file_exists:
                writer.writeheader()
            data_to_save = {k: v for k, v in arbitrage_data.items() if k != 'message'}
            writer.writerow(data_to_save)
            arbitrage_history[arbitrage_data['timestamp']] = data_to_save
        logging.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ –≤ CSV: {arbitrage_data['symbol']} –∑ –ø—Ä–∏–±—É—Ç–∫–æ–º {arbitrage_data['profit']:.4f}%")
    except Exception as e:
         logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ CSV: {e}")

def get_exchange_config(exchange_id):
    exchange_config = {
        'apiKey': globals().get(f"{exchange_id.upper()}_API_KEY"),
        'secret': globals().get(f"{exchange_id.upper()}_SECRET_KEY"),
        'enableRateLimit': True,
    }
    if exchange_id == 'bybit':
        exchange_config['options'] = {'recvWindow': RECV_WINDOW}
    elif exchange_id == 'okx':
        exchange_config['options'] = {'defaultType': 'spot'}
    return exchange_config

def split_symbols_by_type(symbols):
    spot = []
    futures = []
    for s in symbols:
        if ':USDT' in s or s.endswith('USD') or 'USD_' in s:
            futures.append(s)
        else:
            spot.append(s)
    return spot, futures

async def data_streamer(exchange_id, symbols):
    global price_cache, bot_running
    exchange_config = get_exchange_config(exchange_id)
    if not exchange_config.get('apiKey') or not exchange_config.get('secret'):
        logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {exchange_id.upper()} - –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á—ñ API.")
        return
    exchange = None
    try:
        exchange = getattr(ccxt, exchange_id)(exchange_config)
        logging.info(f"–°—Ç—Ä—ñ–º–µ—Ä {exchange_id.upper()} –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è {len(symbols)} –ø–∞—Ä.")
        for symbol in symbols:
            if symbol not in price_cache:
                price_cache[symbol] = {}
            price_cache[symbol][exchange_id] = {'bid': None, 'ask': None, 'volume': MIN_VOLUME}
        while bot_running:
            try:
                tickers = await exchange.watch_tickers(symbols) 
                if isinstance(tickers, list):
                    tickers = {t['symbol']: t for t in tickers if t and t.get('symbol')}
                for symbol, ticker in tickers.items():
                    if not ticker:
                        continue
                    bid = ticker.get('bid')
                    ask = ticker.get('ask')
                    volume = ticker.get('quoteVolume', MIN_VOLUME)
                    if bid is not None and ask is not None:
                        try:
                            price_cache[symbol][exchange_id] = {
                                'bid': float(bid),
                                'ask': float(ask),
                                'volume': float(volume) if volume is not None else MIN_VOLUME
                            }
                        except (TypeError, ValueError) as e:
                            logging.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è {symbol} –Ω–∞ {exchange_id}: {e}")
                    else:
                        logging.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è {symbol} –Ω–∞ {exchange_id}: bid={bid}, ask={ask}")
            except (ccxt.NetworkError, ccxt.DDoSProtection) as e:
                logging.warning(f"–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ {exchange_id.upper()}: {e}. –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5—Å.")
                await asyncio.sleep(5)
            except InvalidNonce as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —á–∞—Å—É {exchange_id.upper()}: {e}")
                await send_telegram_message(f"‚ö†Ô∏è {exchange_id.upper()}: –ü—Ä–æ–±–ª–µ–º–∞ –∑ —á–∞—Å–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å!")
                break
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞ {exchange_id.upper()}: {e}")
                await send_telegram_message(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞ {exchange_id.upper()}: {e}")
                break
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç—Ä–∏–º–µ—Ä–∞ {exchange_id.upper()}: {e}")
    finally:
        logging.info(f"–°—Ç—Ä—ñ–º–µ—Ä {exchange_id.upper()} –∑—É–ø–∏–Ω–µ–Ω–æ.")
        if exchange:
            await exchange.close()

async def arbitrage_calculator():
    global bot_running, price_cache, message_tracker, last_message_update, paper_trader
    strategies = {
        'cross_exchange': check_cross_exchange_arbitrage,
        'triangular': check_triangular_arbitrage,
        'spot_futures': check_spot_futures_arbitrage,
    }
    MESSAGE_TIMEOUT = 300
    while bot_running:
        start_time = time.time()
        try:
            if not price_cache:
                await asyncio.sleep(1)
                continue

            current_opportunities = {}
            
            # 1. –ú—ñ–∂–±—ñ—Ä–∂–æ–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂
            for symbol in price_cache.keys():
                try:
                    async for opportunity in strategies['cross_exchange'](symbol, price_cache, list(price_cache.keys())):
                        if opportunity.get('profit') is not None:
                            trade_started = await paper_trader.process_signal(opportunity)
                            if trade_started:
                                current_opportunities[opportunity['path']] = opportunity
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cross_exchange –¥–ª—è {symbol}: {e}")

            # 2. –¢—Ä–∏–∫—É—Ç–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂
            for exchange_id in EXCHANGES:
                try:
                    async for opportunity in strategies['triangular'](exchange_id, price_cache, list(price_cache.keys())):
                        if opportunity.get('profit') is not None:
                            trade_started = await paper_trader.process_signal(opportunity)
                            if trade_started:
                                current_opportunities[opportunity['path']] = opportunity
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ triangular –¥–ª—è {exchange_id}: {e}")

            # 3. –°–ø–æ—Ç-—Ñ'—é—á–µ—Ä—Å –∞—Ä–±—ñ—Ç—Ä–∞–∂
            for exchange_id in EXCHANGES:
                try:
                    async for opportunity in strategies['spot_futures'](exchange_id, price_cache, list(price_cache.keys())):
                        if opportunity.get('profit') is not None:
                            trade_started = await paper_trader.process_signal(opportunity)
                            if trade_started:
                                current_opportunities[opportunity['path']] = opportunity
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ spot_futures –¥–ª—è {exchange_id}: {e}")

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —É–≥–æ–¥
            completed_trades = await paper_trader.update_trades()
            for trade in completed_trades:
                logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É–≥–æ–¥—É: {trade['profit_usd']:.4f} USDT –∑–∞ {trade['duration']:.1f} —Å–µ–∫")

            current_time = time.time()
            for path, opportunity in current_opportunities.items():
                should_update = False
                if path not in message_tracker:
                    should_update = True
                else:
                    old_profit = message_tracker[path]['data']['profit']
                    new_profit = opportunity['profit']
                    profit_change = abs(new_profit - old_profit)
                    status_changed = (old_profit >= PROFIT_THRESHOLD * 100) != (new_profit >= PROFIT_THRESHOLD * 100)
                    if (profit_change > 0.1 or status_changed) and (current_time - last_message_update[path] >= MIN_UPDATE_INTERVAL):
                        should_update = True
                if should_update:
                    if path not in message_tracker and len(message_tracker) >= MAX_ACTIVE_MESSAGES:
                        oldest_path = min(message_tracker.keys(), key=lambda x: message_tracker[x]['last_updated'])
                        try:
                            await bot.delete_message(chat_id=CHAT_ID, message_id=message_tracker[oldest_path]['message_id'])
                            logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {oldest_path} —á–µ—Ä–µ–∑ –ª—ñ–º—ñ—Ç")
                            del message_tracker[oldest_path]
                            if oldest_path in last_message_update:
                                del last_message_update[oldest_path]
                        except Exception as e:
                            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                    status = "–ê–∫—Ç—É–∞–ª—å–Ω–æ ‚úÖ" if opportunity['profit'] >= PROFIT_THRESHOLD * 100 else "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚ùå"
                    message = f"{opportunity['message']}\n<b>–°—Ç–∞—Ç—É—Å: {status}</b>"
                    if path in message_tracker:
                        message_id = message_tracker[path]['message_id']
                        new_message_id = await send_telegram_message(message, opportunity['details'], message_id)
                        if new_message_id:
                            message_tracker[path]['message_id'] = new_message_id
                            message_tracker[path]['data'] = opportunity
                            message_tracker[path]['last_updated'] = current_time
                            last_message_update[path] = current_time
                    else:
                        message_id = await send_telegram_message(message, opportunity['details'])
                        if message_id:
                            message_tracker[path] = {
                                'message_id': message_id,
                                'last_updated': current_time,
                                'data': opportunity
                            }
                            last_message_update[path] = current_time
                            save_to_csv(opportunity)

            # –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö
            for path in list(message_tracker.keys()):
                if path not in current_opportunities:
                    opportunity = message_tracker[path]['data']
                    status = "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚ùå"
                    message = f"{opportunity['message']}\n<b>–°—Ç–∞—Ç—É—Å: {status}</b>"
                    message_id = message_tracker[path]['message_id']
                    await send_telegram_message(message, opportunity['details'], message_id)
                    message_tracker[path]['last_updated'] = current_time
                if current_time - message_tracker[path]['last_updated'] > MESSAGE_TIMEOUT:
                    try:
                        await bot.delete_message(chat_id=CHAT_ID, message_id=message_tracker[path]['message_id'])
                        logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {path}")
                    except Exception as e:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {path}: {e}")
                    del message_tracker[path]
                    if path in last_message_update:
                        del last_message_update[path]

            elapsed_time = time.time() - start_time
            wait_time = max(2.0, ARBITRAGE_LOOP_DELAY - elapsed_time)
            await asyncio.sleep(wait_time) 

        except Exception as e:
            logging.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ arbitrage_calculator: {e}")
            await send_telegram_message(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {str(e)}")
            await asyncio.sleep(5)

# *** –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ –ó–ê–ü–£–°–ö–£ ***
async def find_arbitrage(application):
    global bot_running, telegram_message_queue, paper_trader
    telegram_message_queue = asyncio.Queue()
    telegram_worker_task = asyncio.create_task(telegram_message_worker())
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ PaperTrader –ü–Ü–°–õ–Ø –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    paper_trader = PaperTrader()

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –±—ñ—Ä–∂—ñ –æ–∫—Ä–µ–º–æ
    exchange_symbols = {}
    for ex_id in EXCHANGES:
        try:
            config = get_exchange_config(ex_id)
            if not config.get('apiKey'):
                logging.warning(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è {ex_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
                continue
            exchange = getattr(ccxt, ex_id)(config)
            markets = await exchange.load_markets()
            
            if ex_id == 'bybit':
                symbols = [
                    s for s in TOP_SYMBOLS 
                    if s in markets 
                    and markets[s].get('active')
                    and (s.endswith('/USDT') or ':USDT' in s or s.endswith('USDT'))
                ]
            else:
                symbols = [s for s in TOP_SYMBOLS if s in markets and markets[s].get('active')]
                
            exchange_symbols[ex_id] = symbols
            logging.info(f"–ë—ñ—Ä–∂–∞ {ex_id}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(symbols)} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤")
            await exchange.close()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è {ex_id}: {e}")
            exchange_symbols[ex_id] = []

    stream_tasks = []
    
    for exchange_id in EXCHANGES:
        symbols = exchange_symbols.get(exchange_id, [])
        if not symbols:
            continue
            
        if exchange_id == 'binance':
            spot_syms, futures_syms = split_symbols_by_type(symbols)
            if spot_syms:
                stream_tasks.append(asyncio.create_task(data_streamer('binance', spot_syms), name='Binance_Spot'))
            if futures_syms:
                stream_tasks.append(asyncio.create_task(data_streamer('binance', futures_syms), name='Binance_Futures'))
                
        elif exchange_id == 'bybit':
            batch_size = 10
            batches = [symbols[i:i + batch_size] for i in range(0, len(symbols), batch_size)]
            for i, batch in enumerate(batches):
                stream_tasks.append(asyncio.create_task(
                    data_streamer('bybit', batch), 
                    name=f'Bybit_Streamer_{i+1}'
                ))
                
        else:
            stream_tasks.append(asyncio.create_task(data_streamer(exchange_id, symbols), name=f'{exchange_id.capitalize()}_Streamer'))
    
    calc_task = asyncio.create_task(arbitrage_calculator(), name='Arbitrage_Calculator')
    all_tasks = stream_tasks + [calc_task]
    
    try:
        await asyncio.gather(*all_tasks, telegram_worker_task)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ asyncio.gather: {e}")
    finally:
        bot_running = False
        if telegram_worker_task and not telegram_worker_task.done():
            telegram_worker_task.cancel()
        telegram_message_queue = None

# --- –¢–ï–õ–ï–ì–†–ê–ú-–ö–û–ú–ê–ù–î–ò ---
async def start(update, context):
    global bot_running
    if bot_running:
        await update.message.reply_text("–ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. ‚úÖ")
        raise ApplicationHandlerStop 
    bot_running = True
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ê–Ω–∞–ª—ñ–∑—É—é –≤—Å—ñ –±—ñ—Ä–∂—ñ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó. üü¢")
    asyncio.create_task(find_arbitrage(context.application))

async def stop(update, context):
    global bot_running
    bot_running = False
    await update.message.reply_text("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. üî¥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")

async def set_profit(update, context):
    try:
        global PROFIT_THRESHOLD
        if not context.args:
            await update.message.reply_text(f"–ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—ñ–≥: {PROFIT_THRESHOLD*100:.4f}%. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è: /set_profit 0.05 (–¥–ª—è 0.05%)")
            return
        new_threshold = float(context.args[0]) / 100
        PROFIT_THRESHOLD = new_threshold
        await update.message.reply_text(f"–ù–æ–≤–∏–π –ø–æ—Ä—ñ–≥ –ø—Ä–∏–±—É—Ç–∫—É: {new_threshold*100:.4f}%. ‚úÖ")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_profit 0.05 ‚ùå")

async def history(update, context):
    if not arbitrage_history:
        await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    latest_entries = sorted(arbitrage_history.items(), key=lambda item: item[0], reverse=True)[:5]
    message_lines = ["<b>üî• –û—Å—Ç–∞–Ω–Ω—è –Ü—Å—Ç–æ—Ä—ñ—è –ê—Ä–±—ñ—Ç—Ä–∞–∂—É (5) üî•</b>"]
    for timestamp, data in latest_entries:
        line = (
            f"üí∞ <b>{data['profit']:.3f}%</b> | "
            f"üîÑ {data['type'].upper()} | "
            f"üìä {data['symbol']} | "
            f"üíµ ~{data['earnings']:.2f} USDT"
        )
        message_lines.append(line)
    message = "\n".join(message_lines)
    await update.message.reply_text(message, parse_mode='HTML')

async def balance(update, context):
    summary = paper_trader.get_summary()
    message = (
        f"<b>üìä Paper Trading –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{summary['total_balance_usdt']:.2f} USDT</b>\n"
        f"üîÑ –ê–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥: <b>{summary['active_trades']}</b>\n\n"
        f"<b>–ë–∞–ª–∞–Ω—Å–∏ –∑–∞ –±—ñ—Ä–∂–∞–º–∏:</b>\n"
    )
    for ex, coins in summary['balances'].items():
        if coins:
            coins_str = ", ".join([f"{c}: {v:.2f}" for c, v in coins.items()])
            message += f"‚Ä¢ <b>{ex.upper()}</b>: {coins_str}\n"
    await update.message.reply_text(message, parse_mode='HTML')